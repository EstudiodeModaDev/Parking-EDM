/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

export type Object = object;

export interface ConnectorMetadata {
  metadatatype?: string;
  activitytype?: string;
  schema?: Object;
}

export interface PostFeedSchema {
  schema?: Object;
}

export interface PostMessageSchema {
  schema?: Object;
}

export interface PostCardSchema {
  schema?: Object;
}

export interface PostCardAndWaitSchema {
  schema?: Object;
}

export interface UnifiedActionSchema {
  schema?: Object;
}

export interface GetMessageDetailsSchema {
  schema?: Object;
}

export interface ListMembersSchema {
  schema?: Object;
}

export interface GetTagsResponseSchema {
  "@odata.context"?: string;
  value?: {
    // Unique identifier of the tag
    id?: string;
    // ID of the team in which the tag is defined
    teamId?: string;
    // The name of the tag as it appears to the user in Microsoft Teams.
    displayName?: string;
    // The number of users assigned to the tag
    memberCount?: number;
  };
}

export interface GetTagMembersResponseSchema {
  value?: {
    // The unique identifier for the member
    id?: string;
    // The ID of the tenant that the tag member is a part of
    tenantId?: string;
    // The member's display name
    displayName?: string;
    // The user ID of the member
    userId?: string;
  };
}

export interface CreateTagResponseSchema {
  "@odata.type"?: string;
  // Unique identifier of the tag
  id?: string;
  // ID of the team in which the tag is defined
  teamId?: string;
  // The name of the tag as it appears to the user in Microsoft Teams.
  displayName?: string;
  // The number of users assigned to the tag
  memberCount?: number;
}

export interface AddMemberToTagResponseSchema {
  // User ID of the member added to the tag
  userId?: string;
}

export type DynamicGetMessageDetailsSchema = object;

export type DynamicGetMessageDetailsResponseSchema = object;

export type DynamicListMembersSchema = object;

export interface ListMembersResponseSchema {
  // List members response
  value?: {
    // Display name of the member
    displayName?: string;
    // Email address of the member
    email?: string;
    // Member's user ID
    id?: string;
    // The roles for that member
    roles?: string[];
    // Tenant ID of the member
    tenantId?: string;
    // User ID of the member
    userId?: string;
    // The timestamp denoting how far back a conversation's history is shared with the conversation member
    visibleHistoryStartDateTime?: string;
  };
}

export interface ListRepliesResponseSchema {
  // List replies response
  value?: {
    // Reply ID
    id?: string;
    // ID of the message being replied to
    replyToId?: string;
    // ETag of the reply
    etag?: string;
    // Type of the message
    messageType?: string;
    // Creation timestamp of the reply
    createdDateTime?: string;
    // Last modification timestamp of the reply
    lastModifiedDateTime?: string;
    // Last edited timestamp of the reply
    lastEditedDateTime?: string;
    // Deletion timestamp of the reply
    deletedDateTime?: string;
    // Subject of the reply
    subject?: string;
    // Summary of the reply
    summary?: string;
    // Chat ID associated with the reply
    chatId?: string;
    // Importance of the reply
    importance?: string;
    // Locale of the reply
    locale?: string;
    // Web URL of the reply
    webUrl?: string;
    // Policy violation details
    policyViolation?: Record<string, unknown>;
    // Event details associated with the reply
    eventDetail?: Record<string, unknown>;
    // Details of the user who sent the reply
    from?: {
      // Application details
      application?: Record<string, unknown>;
      // Device details
      device?: Record<string, unknown>;
      // User details
      user?: {
        // User ID
        id?: string;
        // Display name of the user
        displayName?: string;
        // Type of user identity
        userIdentityType?: string;
        // Tenant ID of the user
        tenantId?: string;
      };
    };
    // Content of the reply
    body?: {
      // Content type of the reply
      contentType?: string;
      // Content of the reply
      content?: string;
    };
    // Channel identity details
    channelIdentity?: {
      // Team ID
      teamId?: string;
      // Channel ID
      channelId?: string;
    };
    // Attachments in the reply
    attachments?: Record<string, unknown>[];
    // Mentions in the reply
    mentions?: Record<string, unknown>[];
    // Reactions to the reply
    reactions?: Record<string, unknown>[];
    // History of the message
    messageHistory?: Record<string, unknown>[];
  };
}

export type DynamicUserNotificationRequest = object;

export type DynamicPostConversationNotificationRequest = object;

export type DynamicChannelNotificationRequest = object;

export type DynamicPostFeedNotificationRequest = object;

export type DynamicPostMessageRequest = object;

export type DynamicReplyMessageRequest = object;

export type DynamicPostCardRequest = object;

export type DynamicPostCardAndWaitRequest = object;

export type DynamicReplyCardRequest = object;

export type DynamicUpdateCardRequest = object;

export type DynamicUserAdaptiveCardRequest = object;

export type DynamicChannelAdaptiveCardRequest = object;

export type DynamicUserMessageWithOptionsSubscriptionRequest = object;

export type DynamicUserMessageWithOptionsSubscriptionResult = object;

export type DynamicSelectedMessageTriggerResult = object;

export type DynamicComposeMessageTriggerResult = object;

export type DynamicCardResponseTriggerResult = object;

export interface WebhookTriggerSchema {
  schema?: Object;
}

export interface MessageReactionWebhookResponseSchema {
  threadType?: string;
  // The chat's unique identifier
  chatId?: string;
  // The team's unique identifier
  teamId?: string;
  // The channel's unique identifier
  channelId?: string;
  // Id of the message which was reacted
  messageId?: string;
  // ID of the parent message of the thread
  replyToId?: string;
  // Link to the message which was reacted
  messageLink?: string;
  // Reacting user's Id
  userId?: string;
  // Message reaction used
  messageReaction?: string;
}

export interface ChatMessageWebhookResponseSchema {
  // Message details response
  value?: {
    // The chat's unique identifier
    conversationId?: string;
    // Message ID
    messageId?: string;
    // Message link
    linkToMessage?: string;
  };
}

export type DynamicWebhookTriggerRequestSchema = object;

export type DynamicKeywordWebhookTriggerResponseSchema = object;

export type DynamicAtMentionWebhookTriggerResponseSchema = object;

export type DynamicNewMessageWebhookTriggerResponseSchema = object;

export type DynamicPostToConversationResponse = object;

export type DynamicPostGatherInputToConversationResponse = object;

export interface DynamicResponseSchema {
  schema?: Object;
}

export interface MessageId {
  // Unique message identifier
  id?: string;
}

export type DynamicUserFlowContinuationSubscriptionResult = object;

export type DynamicChannelFlowContinuationSubscriptionResult = object;

export type DynamicGatherInputSubscriptionResult = object;

export interface GetMessagesFromChannel_Response {
  // @odata.context
  "@odata.context"?: string;
  // @odata.count
  "@odata.count"?: number;
  // @odata.nextLink
  "@odata.nextLink"?: string;
  value?: OnNewChannelMessage_Response;
}

export type OnGroupMemberChange_Response = unknown;

export type OnNewChannelMessage_Response = unknown;

export interface GetTeamResponse {
  // The unique identifier of the team
  id?: string;
  // The name of the team
  displayName?: string;
  // The description of the team, optional
  description?: string;
  // The internal ID of the team
  internalId?: string;
  // A hyperlink that will go to the team in the Microsoft Teams client
  webUrl?: string;
  // Whether this team is in read-only mode
  isArchived?: boolean;
  memberSettings?: MemberSettings;
  guestSettings?: GuestSettings;
  messagingSettings?: MessagingSettings;
  funSettings?: FunSettings;
  discoverySettings?: DiscoverySettings;
}

export interface GetChannelResponse {
  // The unique identifier of the channel
  id?: string;
  // The name of the channel
  displayName?: string;
  // The description of the channel, optional
  description?: string;
  // The email address for sending messages to the channel
  email?: string;
  // The ID of the Microsoft Entra tenant.
  tenantId?: string;
  // A hyperlink for the channel in Microsoft Teams
  webUrl?: string;
  // The SharePoint folder URL of the channel
  filesFolderWebUrl?: string;
  // Timestamp at which the channel was created. Read only
  createdDateTime?: string;
  // The channel membership type
  membershipType?: string;
}

export interface WebhookRequest {
  // Specify a well-formed URL of the endpoint that will receive notifications
  notificationUrl: string;
}

export interface GetTimeOffReasonsResponse {
  "@odata.context"?: string;
  // The list of time off reasons.
  value?: {
    // The unique ID of the time off reason.
    id?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
    createdDateTime?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
    lastModifiedDateTime?: string;
    // Display Name
    displayName?: string;
    // Icon Type
    iconType?: string;
    // Is Active
    isActive?: boolean;
    lastModifiedBy?: LastModifiedBy;
  };
}

export interface TimeOffRequestResponse {
  // The unique ID of the TimeOff request.
  id?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  createdDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  lastModifiedDateTime?: string;
  // The person the request is assigned to: 'manager' or 'recipient'
  assignedTo?: string;
  // 'approved', 'pending' or 'declined'
  state?: string;
  // Time when the request was sent
  senderDateTime?: string;
  // The message from the request sender
  senderMessage?: string;
  // The ID of the user that sent the request
  senderUserId?: string;
  // Time when the manager responded
  managerActionDateTime?: string;
  // The message from the manager
  managerActionMessage?: string;
  // The ID of the manager that responded
  managerUserId?: string;
  // Start of time requested off
  startDateTime?: string;
  // End of time requested off
  endDateTime?: string;
  // The ID of the TimeOff Reason
  timeOffReasonId?: string;
}

export interface OfferShiftRequestResponse {
  // The unique ID of the Offer Shift request.
  id?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  createdDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  lastModifiedDateTime?: string;
  // The person the request is assigned to: 'manager' or 'recipient'
  assignedTo?: string;
  // 'approved', 'pending' or 'declined'
  state?: string;
  // Time when the request was sent
  senderDateTime?: string;
  // The message from the request sender
  senderMessage?: string;
  // The ID of the user that sent the request
  senderUserId?: string;
  // The ID of the shift from the sender
  senderShiftId?: string;
  // Time when the recipient responded
  recipientActionDateTime?: string;
  // The message from the recipient
  recipientActionMessage?: string;
  // The ID of the recipient of the request
  recipientUserId?: string;
  // Time when the manager responded
  managerActionDateTime?: string;
  // The message from the manager
  managerActionMessage?: string;
  // The ID of the manager that responded
  managerUserId?: string;
}

export interface SwapShiftsChangeRequestResponse {
  // The unique ID of the Swap Shift request.
  id?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  createdDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  lastModifiedDateTime?: string;
  // The person the request is assigned to: 'manager' or 'recipient'
  assignedTo?: string;
  // 'approved', 'pending' or 'declined'
  state?: string;
  // Time when the request was sent
  senderDateTime?: string;
  // The message from the request sender
  senderMessage?: string;
  // The ID of the user that sent the request
  senderUserId?: string;
  // The ID of the shift from the sender
  senderShiftId?: string;
  // Time when the recipient responded
  recipientActionDateTime?: string;
  // The message from the recipient
  recipientActionMessage?: string;
  // The ID of the recipient of the request
  recipientUserId?: string;
  // The ID of the shift from the recipient
  recipientShiftId?: string;
  // Time when the manager responded
  managerActionDateTime?: string;
  // The message from the manager
  managerActionMessage?: string;
  // The ID of the manager that responded
  managerUserId?: string;
}

export interface OpenShiftChangeRequestResponse {
  // The unique ID of the Open Shift Change request.
  id?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  createdDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  lastModifiedDateTime?: string;
  // The person the request is assigned to: 'manager' or 'recipient'
  assignedTo?: string;
  // 'approved', 'pending' or 'declined'
  state?: string;
  // Time when the request was sent
  senderDateTime?: string;
  // The message from the request sender
  senderMessage?: string;
  // The ID of the user that sent the request
  senderUserId?: string;
  // Time when the manager responded
  managerActionDateTime?: string;
  // The message from the manager
  managerActionMessage?: string;
  // The ID of the manager that responded
  managerUserId?: string;
  // The ID of the open shift being requested
  openShiftId?: string;
}

export interface EditOpenShiftRequest {
  // Scheduling Group ID
  schedulingGroupId?: string;
  sharedOpenShift?: {
    // Display Name
    displayName?: string;
    // Notes
    notes?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
    startDateTime: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
    endDateTime: string;
    theme?: ThemeEditor;
    // Open Slot Count
    openSlotCount: number;
    activities?: Activities;
  };
}

export interface OpenShiftResponse {
  // The unique ID of the open shift.
  id?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  createdDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  lastModifiedDateTime?: string;
  // Scheduling Group ID
  schedulingGroupId?: string;
  lastModifiedBy?: LastModifiedBy;
  sharedOpenShift?: SharedOpenShift;
  draftOpenShift?: DraftOpenShift;
}

export interface SharedOpenShift {
  // Display Name
  displayName?: string;
  // Notes
  notes?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  startDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  endDateTime?: string;
  // Theme
  theme?: string;
  // Open Slot Count
  openSlotCount?: number;
  activities?: Activities;
}

export interface DraftOpenShift {
  // Display Name
  displayName?: string;
  // Notes
  notes?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  startDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  endDateTime?: string;
  // Theme
  theme?: string;
  // Open Slot Count
  openSlotCount?: number;
  activities?: Activities;
}

export interface ShiftResponse {
  // The unique ID of the shift.
  id?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  createdDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  lastModifiedDateTime?: string;
  // Assigned To User ID
  userId?: string;
  // Scheduling Group ID
  schedulingGroupId?: string;
  lastModifiedBy?: LastModifiedBy;
  sharedShift?: SharedShift;
  draftShift?: DraftShift;
}

export interface SharedShift {
  // Display Name
  displayName?: string;
  // Notes
  notes?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  startDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  endDateTime?: string;
  // Theme
  theme?: string;
  activities?: Activities;
}

export interface DraftShift {
  // Display Name
  displayName?: string;
  // Notes
  notes?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  startDateTime?: string;
  // yyyy-MM-ddTHH:mm:ss.fffZ (UTC format)
  endDateTime?: string;
  // Theme
  theme?: string;
  activities?: Activities;
}

export interface ScheduleResponse {
  // The unique ID of the schedule.
  id?: string;
  // The Time Zone of the schedule.
  timeZone?: string;
  // The Provision Status of the schedule.
  provisionStatus?: string;
  // The Provision Status Code of the schedule.
  provisionStatusCode?: string;
}

export interface CreateATeamResponse {
  // Team ID of the team that was just created
  newTeamId?: string;
}

export interface PostToConversationResponse {
  // Unique message ID
  id?: string;
  // Link to the message in Microsoft Teams
  messageLink?: string;
  // The chat's unique identifier
  conversationId?: string;
}

export type ThemeEditor = string;

export type Activities = unknown;

export interface SchedulingGroupResponse {
  // The unique ID of the scheduling group.
  id?: string;
  // The display name for the scheduling group.
  displayName?: string;
  // Indicates whether the scheduling group can be used when creating new entities or updating existing ones.
  isActive?: boolean;
  // List of IDs of users in the scheduling group.
  userIds?: string[];
}

export interface AtMentionUser_V1 {
  // An @mention token for the user. This property can be inserted into messages
  atMention?: string;
}

export interface BotMentionRequest {
  // The bot's unique identifier (GUID)
  botId: string;
  // The bot's app identifier (GUID)
  appId: string;
  // The bot's display name
  name: string;
}

export interface AtMentionBotResponse {
  // An @mention token for the bot. This property can be inserted into messages and adaptive cards
  atMention?: string;
}

export interface AtMentionTagResponse {
  // A token for the tag to @mention. It can be inserted into messages and adaptive cards sent from a person
  atMention?: string;
}

export type ChannelIdForTeam = string;

export interface ChannelIds {
  channel: ChannelIdForTeam;
}

export type ChatId = string;

export interface NewChat {
  // Title, displayed only in group chats
  topic?: string;
  // User's IDs, separated by semicolons
  members: string;
}

export interface NewChatResponse {
  // The chat's unique identifier
  id?: string;
}

export interface NewMeeting {
  // The text of the event's subject line
  subject: string;
  // The body of the message associated with the event
  body: {
    // The content of the event
    content: string;
    // The type of the content. Possible values are text and html
    contentType: string;
  };
  // Time zone of the event
  timeZone: string;
  start: {
    // Start time of the event (example: '2017-08-29T04:00:00')
    dateTime: string;
  };
  end: {
    // End time of the event (example: '2017-08-29T05:00:00')
    dateTime: string;
  };
  // Required attendees for the event separated by semicolons
  requiredAttendees?: string;
  // Optional attendees for the event separated by semicolons
  optionalAttendees?: string;
  // The location of the event
  location?: {
    // The name associated with the location
    displayName?: string;
  };
  // The importance of the event: low, normal or high
  importance?: string;
  // The recurrence pattern for the meeting
  recurrence?: {
    pattern?: {
      // Pattern for the recurrence. Required when meeting is a recurrence
      type?: string;
      // The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required when meeting is a recurrence
      interval?: number;
      // Comma separated days of weeks (example: 'Monday,Wednesday,Friday')
      daysOfWeek?: string[];
      // Specifies on which day of the week the event occurs. Default is first
      index?: string;
    };
    // The recurrence pattern for the meeting
    range?: {
      // Start date of the recurrence, format YYYY-MM-DD. Required when meeting is a recurrence
      startDate?: string;
      // End date of the recurrence, format YYYY-MM-DD
      endDate?: string;
    };
  };
  // Set to true if the event lasts all day
  isAllDay?: boolean;
  // The number of minutes before the event start time that the reminder alert occurs
  reminderMinutesBeforeStart?: number;
  // Set to true if an alert is set to remind the user of the event
  isReminderOn?: boolean;
  // Status to show during the event
  showAs?: string;
  // Set to true if the sender would like a response when the event is accepted
  responseRequested?: boolean;
  // Set to true, if the meeting should have an online meeting provider
  isOnlineMeeting: boolean;
  // Represents the online meeting service provider
  onlineMeetingProvider: string;
}

export interface NewMeetingRespone {
  // Unique identifier for the event
  id?: string;
  // Timestamp the event was created
  createdDateTime?: string;
  // Timestamp the event was last modified
  lastModifiedDateTime?: string;
  // The categories associated with the event
  categories?: unknown[];
  // Time zone of the event
  timeZone?: string;
  // The number of minutes before the event start time that the reminder alert occurs
  reminderMinutesBeforeStart?: number;
  // Set to true if an alert is set to remind the user of the event
  isReminderOn?: boolean;
  // Set to true if the event has attachments
  hasAttachments?: boolean;
  // The text of the event's subject line
  subject?: string;
  // The preview of the message associated with the event
  bodyPreview?: string;
  // The importance of the event. The possible values are: low, normal, high
  importance?: string;
  // Sensitivity of the event
  sensitivity?: string;
  // Set to true if the event lasts all day
  isAllDay?: boolean;
  // Set to true if the event has been canceled
  isCancelled?: boolean;
  // Set to true if the calendar owner is the organizer of the event
  isOrganizer?: boolean;
  // The organizer would like an invitee to send a response to the event
  responseRequested?: boolean;
  // The status to show. Possible values are: free, tentative, busy, oof, workingElsewhere, unknown.
  showAs?: string;
  // The event type. Possible values are: singleInstance, occurrence, exception, seriesMaster
  type?: string;
  // The URL to open the event in Outlook on the web.
  webLink?: string;
  // A URL for an online meeting
  onlineMeetingUrl?: string;
  // True if the meeting organizer allows invitees to propose a new time when responding
  allowNewTimeProposals?: boolean;
  // The recurrence pattern for the event
  recurrence?: {
    // The frequency of an event
    pattern?: Record<string, unknown>;
    // The duration of an event
    range?: Record<string, unknown>;
  };
  // Indicates the type of response sent in response to an event message
  responseStatus?: {
    // The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded
    response?: string;
    // The date and time when the response was returned
    time?: string;
  };
  // The body of the message associated with the event
  body?: {
    // The type of the content. Possible values are text and html
    contentType?: string;
    // The content of the event
    content?: string;
  };
  // The start date, time, and time zone of the event
  start?: {
    // Start time of the event (example: '2017-08-29T04:00:00')
    dateTime?: string;
  };
  // The date, time, and time zone that the event ends
  end?: {
    // End time of the event (example: '2017-08-29T04:00:00')
    dateTime?: string;
  };
  // The location of the event
  location?: {
    // The name associated with the location
    displayName?: string;
  };
  // The collection of attendees for the event
  attendees?: {
    // The attendee type: required, optional, resource
    type?: string;
    // The attendee's response
    status?: {
      // The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded
      response?: string;
      // The date and time when the response was returned
      time?: string;
    };
    // The name and email address of an attendee
    emailAddress?: {
      // The display name of an attendee
      name?: string;
      // The email address of an attendee
      address?: string;
    };
  };
  // Organizer
  organizer?: {
    // The name and email address of an organizer
    emailAddress?: {
      // The display name of an organizer
      name?: string;
      // The email address of an organizer
      address?: string;
    };
  };
  // Details for an attendee to join the meeting online.
  onlineMeeting?: {
    // The external link that launches the online meeting
    joinUrl?: string;
  };
}

export interface LastModifiedBy {
  // Application
  application?: string;
  // Device
  device?: string;
  // Conversation
  conversation?: string;
  // User
  user?: {
    // Id
    id?: string;
    // Display Name
    displayName?: string;
  };
}

export interface MemberSettings {
  // If set to true, members can add and update channels
  allowCreateUpdateChannels?: boolean;
  // If set to true, members can delete channels
  allowDeleteChannels?: boolean;
  // If set to true, members can add and remove apps
  allowAddRemoveApps?: boolean;
  // If set to true, members can add, update, and remove tabs
  allowCreateUpdateRemoveTabs?: boolean;
  // If set to true, members can add, update, and remove connectors
  allowCreateUpdateRemoveConnectors?: boolean;
}

export interface GuestSettings {
  // If set to true, guests can add and update channels
  allowCreateUpdateChannels?: boolean;
  // If set to true, guests can delete channels
  allowDeleteChannels?: boolean;
}

export interface MessagingSettings {
  // If set to true, users can edit their messages
  allowUserEditMessages?: boolean;
  // If set to true, users can delete their messages
  allowUserDeleteMessages?: boolean;
  // If set to true, owners can delete any message
  allowOwnerDeleteMessages?: boolean;
  // If set to true, @team mentions are allowed
  allowTeamMentions?: boolean;
  // If set to true, @channel mentions are allowed
  allowChannelMentions?: boolean;
}

export interface FunSettings {
  // If set to true, enables Giphy use
  allowGiphy?: boolean;
  // Giphy content rating. Possible values are: moderate, strict
  giphyContentRating?: string;
  // If set to true, enables users to include stickers and memes
  allowStickersAndMemes?: boolean;
  // If set to true, enables users to include custom memes
  allowCustomMemes?: boolean;
}

export interface DiscoverySettings {
  // If set to true, the team is visible via search and suggestions from the Teams client
  showInTeamsSearchAndSuggestions?: boolean;
}

export interface SelectedMessageTriggerMetadata {
  TeamsFlowRunContext?: Object;
  CardOutputs?: Object;
}

export interface ComposeMessageTriggerMetadata {
  TeamsFlowRunContext?: Object;
  CardOutputs?: Object;
}

export interface CardResponseTriggerMetadata {
  TeamsFlowRunContext?: Object;
  CardOutputs?: Object;
}

export interface VirtualAgentBots {
  "@odata.context"?: string;
  // List of the virtual agent bots
  value?: {
    // bot name
    name?: string;
    // Unique ID of the bot
    botid?: string;
  };
}

export type ObjectWithoutType = object;
