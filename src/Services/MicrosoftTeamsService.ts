/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { dataSourcesInfo } from '../../.power/appschemas/dataSourcesInfo';
import { getPowerSdkInstance } from '@pa-client/power-code-sdk/lib/';
import type { AtMentionBotResponse } from '../Models/MicrosoftTeamsModel';
import type { AtMentionUser_V1 } from '../Models/MicrosoftTeamsModel';
import type { BotMentionRequest } from '../Models/MicrosoftTeamsModel';
import type { CardResponseTriggerMetadata } from '../Models/MicrosoftTeamsModel';
import type { ComposeMessageTriggerMetadata } from '../Models/MicrosoftTeamsModel';
import type { ConnectorMetadata } from '../Models/MicrosoftTeamsModel';
import type { CreateATeamResponse } from '../Models/MicrosoftTeamsModel';
import type { CreateTagResponseSchema } from '../Models/MicrosoftTeamsModel';
import type { DynamicChannelAdaptiveCardRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicChannelNotificationRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicGetMessageDetailsSchema } from '../Models/MicrosoftTeamsModel';
import type { DynamicListMembersSchema } from '../Models/MicrosoftTeamsModel';
import type { DynamicPostCardRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicPostFeedNotificationRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicPostMessageRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicReplyCardRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicReplyMessageRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicResponseSchema } from '../Models/MicrosoftTeamsModel';
import type { DynamicUpdateCardRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicUserAdaptiveCardRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicUserMessageWithOptionsSubscriptionRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicUserNotificationRequest } from '../Models/MicrosoftTeamsModel';
import type { DynamicWebhookTriggerRequestSchema } from '../Models/MicrosoftTeamsModel';
import type { EditOpenShiftRequest } from '../Models/MicrosoftTeamsModel';
import type { GetChannelResponse } from '../Models/MicrosoftTeamsModel';
import type { GetMessageDetailsSchema } from '../Models/MicrosoftTeamsModel';
import type { GetMessagesFromChannel_Response } from '../Models/MicrosoftTeamsModel';
import type { GetTagsResponseSchema } from '../Models/MicrosoftTeamsModel';
import type { GetTeamResponse } from '../Models/MicrosoftTeamsModel';
import type { GetTimeOffReasonsResponse } from '../Models/MicrosoftTeamsModel';
import type { IOperationResult } from '@pa-client/power-code-sdk/lib/';
import type { ListMembersSchema } from '../Models/MicrosoftTeamsModel';
import type { ListRepliesResponseSchema } from '../Models/MicrosoftTeamsModel';
import type { NewChat } from '../Models/MicrosoftTeamsModel';
import type { NewMeeting } from '../Models/MicrosoftTeamsModel';
import type { ObjectWithoutType } from '../Models/MicrosoftTeamsModel';
import type { OfferShiftRequestResponse } from '../Models/MicrosoftTeamsModel';
import type { OnGroupMemberChange_Response } from '../Models/MicrosoftTeamsModel';
import type { OnNewChannelMessage_Response } from '../Models/MicrosoftTeamsModel';
import type { OpenShiftChangeRequestResponse } from '../Models/MicrosoftTeamsModel';
import type { OpenShiftResponse } from '../Models/MicrosoftTeamsModel';
import type { PostFeedSchema } from '../Models/MicrosoftTeamsModel';
import type { ScheduleResponse } from '../Models/MicrosoftTeamsModel';
import type { SchedulingGroupResponse } from '../Models/MicrosoftTeamsModel';
import type { SelectedMessageTriggerMetadata } from '../Models/MicrosoftTeamsModel';
import type { ShiftResponse } from '../Models/MicrosoftTeamsModel';
import type { SwapShiftsChangeRequestResponse } from '../Models/MicrosoftTeamsModel';
import type { TimeOffRequestResponse } from '../Models/MicrosoftTeamsModel';
import type { UnifiedActionSchema } from '../Models/MicrosoftTeamsModel';
import type { VirtualAgentBots } from '../Models/MicrosoftTeamsModel';
import type { WebhookTriggerSchema } from '../Models/MicrosoftTeamsModel';

export class MicrosoftTeamsService {
  private static readonly dataSourceName = 'teams';

  /**
   * Create a Teams meeting
   * Create a meeting with a link at the bottom of the invite to join the meeting online on Microsoft Teams.
   */
  public static async CreateTeamsMeeting(calendarid: string, item: NewMeeting): Promise<IOperationResult<void>> {
    const parameters: { calendarid: string, item: NewMeeting } = { calendarid, item };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ calendarid: string, item: NewMeeting }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'CreateTeamsMeeting',
        parameters
      },
    });
    return result;
  }

  /**
   * Get supported time zones
   * Lists the time zones that are supported for the user, as configured on the user's mailbox server.
   */
  public static async GetSupportedTimeZones(): Promise<IOperationResult<Record<string, unknown>>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, Record<string, unknown>>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetSupportedTimeZones',
      },
    });
    return result;
  }

  /**
   * List teams
   * Lists all the Microsoft Teams you are a member of
   */
  public static async GetAllTeams(): Promise<IOperationResult<Record<string, unknown>>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, Record<string, unknown>>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetAllTeams',
      },
    });
    return result;
  }

  /**
   * API to test connections
   * This operation is a quick way to test connections
   */
  public static async GetTeamwork(): Promise<IOperationResult<void>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetTeamwork',
      },
    });
    return result;
  }

  /**
   * List channels
   * Lists all the channels for a specific team
   */
  public static async GetChannelsForGroup(groupId: string): Promise<IOperationResult<Record<string, unknown>>> {
    const parameters: { groupId: string } = { groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string }, Record<string, unknown>>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetChannelsForGroup',
        parameters
      },
    });
    return result;
  }

  /**
   * Create a channel
   * Create a new channel within a specified team
   */
  public static async CreateChannel(body: Record<string, unknown>, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, groupId: string } = { body, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'CreateChannel',
        parameters
      },
    });
    return result;
  }

  /**
   * Get details for a specific channel in team
   * Get the channel details
   */
  public static async GetChannel(groupId: string, channelId: string): Promise<IOperationResult<GetChannelResponse>> {
    const parameters: { groupId: string, channelId: string } = { groupId, channelId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, channelId: string }, GetChannelResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetChannel',
        parameters
      },
    });
    return result;
  }

  /**
   * List chats
   * Lists recent chats you are a part of
   */
  public static async GetChats(chatType: string, topic: string): Promise<IOperationResult<Record<string, unknown>>> {
    const parameters: { chatType: string, topic: string } = { chatType, topic };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ chatType: string, topic: string }, Record<string, unknown>>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetChats',
        parameters
      },
    });
    return result;
  }

  /**
   * List all tags for a team
   * Lists the team's tags
   */
  public static async GetTags(groupId: string): Promise<IOperationResult<GetTagsResponseSchema>> {
    const parameters: { groupId: string } = { groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string }, GetTagsResponseSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetTags',
        parameters
      },
    });
    return result;
  }

  /**
   * Create a tag for a team
   * Creates a tag in a team
   */
  public static async CreateTag(body: Record<string, unknown>, groupId: string): Promise<IOperationResult<CreateTagResponseSchema>> {
    const parameters: { body: Record<string, unknown>, groupId: string } = { body, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string }, CreateTagResponseSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'CreateTag',
        parameters
      },
    });
    return result;
  }

  /**
   * Add a member to a tag
   * Adds a user to a tag
   */
  public static async AddMemberToTag(body: Record<string, unknown>, groupId: string, tagId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, groupId: string, tagId: string } = { body, groupId, tagId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string, tagId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'AddMemberToTag',
        parameters
      },
    });
    return result;
  }

  /**
   * List the members of a tag
   * Lists the members of a tag
   */
  public static async GetTagMembers(groupId: string, tagId: string): Promise<IOperationResult<void>> {
    const parameters: { groupId: string, tagId: string } = { groupId, tagId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, tagId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetTagMembers',
        parameters
      },
    });
    return result;
  }

  /**
   * Delete a member from a tag
   * Deletes a member from a tag
   */
  public static async DeleteTagMember(tagMemberId: string, groupId: string, tagId: string): Promise<IOperationResult<void>> {
    const parameters: { tagMemberId: string, groupId: string, tagId: string } = { tagMemberId, groupId, tagId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ tagMemberId: string, groupId: string, tagId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'DeleteTagMember',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a feed notification
   * Posts a notification to a user's activity feed linking to a chat or team.
   */
  public static async PostFeedNotification(body: DynamicPostFeedNotificationRequest, poster: string, notificationType: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicPostFeedNotificationRequest, poster: string, notificationType: string } = { body, poster, notificationType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicPostFeedNotificationRequest, poster: string, notificationType: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostFeedNotification',
        parameters
      },
    });
    return result;
  }

  /**
   * Get an @mention token for a tag
   * Creates a token that can be inserted into a message or adaptive card sent as a user in a channel to @mention a tag.
   */
  public static async AtMentionTag(groupId: string, tagId: string): Promise<IOperationResult<void>> {
    const parameters: { groupId: string, tagId: string } = { groupId, tagId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, tagId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'AtMentionTag',
        parameters
      },
    });
    return result;
  }

  /**
   * Delete a tag
   * Deletes a tag from a team
   */
  public static async DeleteTag(groupId: string, tagId: string): Promise<IOperationResult<void>> {
    const parameters: { groupId: string, tagId: string } = { groupId, tagId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, tagId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'DeleteTag',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a message (V2)
   * This operation is used to post a message to a channel in a specific Team.
   */
  public static async PostMessageToChannelV2(body: Record<string, unknown>, groupId: string, channelId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, groupId: string, channelId: string } = { body, groupId, channelId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string, channelId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostMessageToChannelV2',
        parameters
      },
    });
    return result;
  }

  /**
   * Get messages
   * This operation is used to get messages from a channel in a specific team
   */
  public static async GetMessagesFromChannel(groupId: string, channelId: string): Promise<IOperationResult<GetMessagesFromChannel_Response>> {
    const parameters: { groupId: string, channelId: string } = { groupId, channelId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, channelId: string }, GetMessagesFromChannel_Response>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessagesFromChannel',
        parameters
      },
    });
    return result;
  }

  /**
   * Get message details
   * Gets details of a message in a chat or a channel
   */
  public static async GetMessageDetails(body: DynamicGetMessageDetailsSchema, messageId: string, threadType: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicGetMessageDetailsSchema, messageId: string, threadType: string } = { body, messageId, threadType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicGetMessageDetailsSchema, messageId: string, threadType: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessageDetails',
        parameters
      },
    });
    return result;
  }

  /**
   * List replies of a channel message
   * This operation is used to list replies to a message in a channel in a specific Team.
   */
  public static async ListRepliesToMessage(groupId: string, channelId: string, messageId: string, $top?: number): Promise<IOperationResult<ListRepliesResponseSchema>> {
    const parameters: { groupId: string, channelId: string, messageId: string, $top?: number } = { groupId, channelId, messageId, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, channelId: string, messageId: string, $top?: number }, ListRepliesResponseSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListRepliesToMessage',
        parameters
      },
    });
    return result;
  }

  /**
   * List members
   * List members of a group chat or a channel
   */
  public static async ListMembers(body: DynamicListMembersSchema, threadType: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicListMembersSchema, threadType: string } = { body, threadType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicListMembersSchema, threadType: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListMembers',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a message (V3)
   * This operation is used to post a message to a channel in a specific Team.
   */
  public static async PostMessageToChannelV3(body: Record<string, unknown>, groupId: string, channelId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, groupId: string, channelId: string } = { body, groupId, channelId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string, channelId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostMessageToChannelV3',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a reply to a message
   * This operation is used to post a reply to a message in a channel in a specific Team.
   */
  public static async PostReplyToMessage(body: Record<string, unknown>, groupId: string, channelId: string, messageId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, groupId: string, channelId: string, messageId: string } = { body, groupId, channelId, messageId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string, channelId: string, messageId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostReplyToMessage',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a reply to a message (V2)
   * This operation is used to post a reply to a message in a channel in a specific Team.
   */
  public static async PostReplyToMessageV2(body: Record<string, unknown>, groupId: string, channelId: string, messageId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, groupId: string, channelId: string, messageId: string } = { body, groupId, channelId, messageId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string, channelId: string, messageId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostReplyToMessageV2',
        parameters
      },
    });
    return result;
  }

  /**
   * When a new channel message is added
   * Triggers when a new message is posted to a channel in a team. Note that this trigger only fires when a root messages is added in the channel. Replies to an existing channel message will not result in the trigger event firing.
   */
  public static async OnNewChannelMessage(groupId: string, channelId: string, $top?: number): Promise<IOperationResult<OnNewChannelMessage_Response>> {
    const parameters: { groupId: string, channelId: string, $top?: number } = { groupId, channelId, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, channelId: string, $top?: number }, OnNewChannelMessage_Response>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OnNewChannelMessage',
        parameters
      },
    });
    return result;
  }

  /**
   * When I am mentioned in a channel message
   * Triggers when a new message that @mentions the current user is added to a channel in a team.
   */
  public static async OnNewChannelMessageMentioningMe(groupId: string, channelId: string, $top?: number): Promise<IOperationResult<OnNewChannelMessage_Response>> {
    const parameters: { groupId: string, channelId: string, $top?: number } = { groupId, channelId, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, channelId: string, $top?: number }, OnNewChannelMessage_Response>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OnNewChannelMessageMentioningMe',
        parameters
      },
    });
    return result;
  }

  /**
   * When I'm @mentioned
   * Triggers when a new message that @mentions the current user is added to a specified chat or channel.
   */
  public static async WebhookAtMentionTrigger(threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema): Promise<IOperationResult<void>> {
    const parameters: { threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema } = { threadType, requestBody };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'WebhookAtMentionTrigger',
        parameters
      },
    });
    return result;
  }

  /**
   * When someone reacted to a message in chat
   * Triggers when someone reacts to a message in a specified chat or channel.
   */
  public static async WebhookMessageReactionTrigger(reactionKey: string, frequency: string, runningPolicy: string, threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema): Promise<IOperationResult<void>> {
    const parameters: { reactionKey: string, frequency: string, runningPolicy: string, threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema } = { reactionKey, frequency, runningPolicy, threadType, requestBody };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ reactionKey: string, frequency: string, runningPolicy: string, threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'WebhookMessageReactionTrigger',
        parameters
      },
    });
    return result;
  }

  /**
   * When a new chat message is added
   * Triggers when a new message is posted in any chat the user is a part of.
   */
  public static async WebhookChatMessageTrigger(ChatMessageSubscriptionRequest: Record<string, unknown>): Promise<IOperationResult<void>> {
    const parameters: { ChatMessageSubscriptionRequest: Record<string, unknown> } = { ChatMessageSubscriptionRequest };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ ChatMessageSubscriptionRequest: Record<string, unknown> }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'WebhookChatMessageTrigger',
        parameters
      },
    });
    return result;
  }

  /**
   * When keywords are mentioned
   * Triggers when a keyword is mentioned in a specified chat or channel. Does not trigger if a message is edited.
   */
  public static async WebhookKeywordTrigger($search: string, threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema): Promise<IOperationResult<void>> {
    const parameters: { $search: string, threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema } = { $search, threadType, requestBody };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ $search: string, threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'WebhookKeywordTrigger',
        parameters
      },
    });
    return result;
  }

  /**
   * When a new message is added to a chat or channel
   * Triggers when a new message is posted in a specified chat or channel. Does not trigger if a message is edited.
   */
  public static async WebhookNewMessageTrigger(threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema): Promise<IOperationResult<void>> {
    const parameters: { threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema } = { threadType, requestBody };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ threadType: string, requestBody?: DynamicWebhookTriggerRequestSchema }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'WebhookNewMessageTrigger',
        parameters
      },
    });
    return result;
  }

  /**
   * Delete Workflows MT Subscriptions
   * Delete Microsoft Graph webhook subscriptions which were created by the Workflows MiddleTier Service
   */
  public static async DeleteWorkflowsMiddleTierSubscriptions(subscriptionIds: string): Promise<IOperationResult<void>> {
    const parameters: { subscriptionIds: string } = { subscriptionIds };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ subscriptionIds: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'DeleteWorkflowsMiddleTierSubscriptions',
        parameters
      },
    });
    return result;
  }

  /**
   * Renew Workflows MT Subscriptions
   * Renew Microsoft Graph webhook subscriptions which were created by the Workflows MiddleTier Service
   */
  public static async RenewWorkflowsMiddleTierSubscriptions(subscriptionIds: string, renewEncryptionCert?: boolean, body?: Record<string, unknown>): Promise<IOperationResult<void>> {
    const parameters: { subscriptionIds: string, renewEncryptionCert?: boolean, body?: Record<string, unknown> } = { subscriptionIds, renewEncryptionCert, body };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ subscriptionIds: string, renewEncryptionCert?: boolean, body?: Record<string, unknown> }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'RenewWorkflowsMiddleTierSubscriptions',
        parameters
      },
    });
    return result;
  }

  /**
   * Delete WebHook Subscription
   * Delete WebHook Subscription
   */
  public static async DeleteWebHookSubscription(subscriptionIds: string): Promise<IOperationResult<void>> {
    const parameters: { subscriptionIds: string } = { subscriptionIds };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ subscriptionIds: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'DeleteWebHookSubscription',
        parameters
      },
    });
    return result;
  }

  /**
   * Update subscription
   * Renew a Microsoft Graph webhook subscription by updating its expiration time
   */
  public static async RenewWebHookSubscription(subscriptionIds: string, body?: Record<string, unknown>): Promise<IOperationResult<void>> {
    const parameters: { subscriptionIds: string, body?: Record<string, unknown> } = { subscriptionIds, body };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ subscriptionIds: string, body?: Record<string, unknown> }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'RenewWebHookSubscription',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a message
   * This operation is used to post a message to a channel in a specific Team.
   */
  public static async PostMessageToChannel(body: Record<string, unknown>, groupId: string, channelId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, groupId: string, channelId: string } = { body, groupId, channelId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, groupId: string, channelId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostMessageToChannel',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a message as the Flow bot to a user
   * Easily automate the process of sending a message to someone in Teams.
   */
  public static async PostUserNotification(PostNotificationRequest: DynamicUserNotificationRequest): Promise<IOperationResult<void>> {
    const parameters: { PostNotificationRequest: DynamicUserNotificationRequest } = { PostNotificationRequest };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ PostNotificationRequest: DynamicUserNotificationRequest }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostUserNotification',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a message as the Flow bot to a channel
   * Easily automate the process of posting a message to a Teams channel.
   */
  public static async PostChannelNotification(PostNotificationRequest: DynamicChannelNotificationRequest, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { PostNotificationRequest: DynamicChannelNotificationRequest, groupId: string } = { PostNotificationRequest, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ PostNotificationRequest: DynamicChannelNotificationRequest, groupId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostChannelNotification',
        parameters
      },
    });
    return result;
  }

  /**
   * Post your own adaptive card as the Flow bot to a user
   * Add the JSON card definition to create a custom message for a Teams user. The message can contain images, graphs, text, and more.
   */
  public static async PostUserAdaptiveCard(PostAdaptiveCardRequest: DynamicUserAdaptiveCardRequest): Promise<IOperationResult<void>> {
    const parameters: { PostAdaptiveCardRequest: DynamicUserAdaptiveCardRequest } = { PostAdaptiveCardRequest };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ PostAdaptiveCardRequest: DynamicUserAdaptiveCardRequest }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostUserAdaptiveCard',
        parameters
      },
    });
    return result;
  }

  /**
   * Post your own adaptive card as the Flow bot to a channel
   * Add the JSON card definition to create a custom post for a Teams channel. The post can contain images, graphs, text, and more.
   */
  public static async PostChannelAdaptiveCard(PostAdaptiveCardRequest: DynamicChannelAdaptiveCardRequest, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { PostAdaptiveCardRequest: DynamicChannelAdaptiveCardRequest, groupId: string } = { PostAdaptiveCardRequest, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ PostAdaptiveCardRequest: DynamicChannelAdaptiveCardRequest, groupId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostChannelAdaptiveCard',
        parameters
      },
    });
    return result;
  }

  /**
   * Get unified action input metadata
   * Get the schema information for unified actions
   */
  public static async GetUnifiedActionSchema(actionType: string, poster: string, recipientType: string): Promise<IOperationResult<UnifiedActionSchema>> {
    const parameters: { actionType: string, poster: string, recipientType: string } = { actionType, poster, recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ actionType: string, poster: string, recipientType: string }, UnifiedActionSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetUnifiedActionSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * Get response schema
   * Get the schema information for unified action responses
   */
  public static async GetPostToConversationResponseSchema(actionType: string, poster: string, recipientType: string): Promise<IOperationResult<DynamicResponseSchema>> {
    const parameters: { actionType: string, poster: string, recipientType: string } = { actionType, poster, recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ actionType: string, poster: string, recipientType: string }, DynamicResponseSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetPostToConversationResponseSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * Get adaptive card input metadata
   * Get the schema information for adaptive card inputs
   */
  public static async GetAdaptiveCardInputMetadata(recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { recipientType: string } = { recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetAdaptiveCardInputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get notification input metadata
   * Get the schema information for notification inputs
   */
  public static async GetNotificationInputMetadata(recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { recipientType: string } = { recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetNotificationInputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Post a choice of options as the Flow bot to a user
   * Send a set of options to a Microsoft Team's user, that they must respond to before the flow will continue. This action will pause the flow until the user response to the options
   */
  public static async SubscribeUserMessageWithOptions(UserMessageWithOptionsSubscriptionRequest: DynamicUserMessageWithOptionsSubscriptionRequest): Promise<IOperationResult<void>> {
    const parameters: { UserMessageWithOptionsSubscriptionRequest: DynamicUserMessageWithOptionsSubscriptionRequest } = { UserMessageWithOptionsSubscriptionRequest };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ UserMessageWithOptionsSubscriptionRequest: DynamicUserMessageWithOptionsSubscriptionRequest }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'SubscribeUserMessageWithOptions',
        parameters
      },
    });
    return result;
  }

  /**
   * Post an Adaptive Card to a Teams user and wait for a response
   * Easily automate the process of sending a message to a Teams user that contains actions to continue a waiting flow.
   */
  public static async SubscribeUserFlowContinuation(UserFlowContinuationSubscriptionRequest: Record<string, unknown>): Promise<IOperationResult<void>> {
    const parameters: { UserFlowContinuationSubscriptionRequest: Record<string, unknown> } = { UserFlowContinuationSubscriptionRequest };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ UserFlowContinuationSubscriptionRequest: Record<string, unknown> }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'SubscribeUserFlowContinuation',
        parameters
      },
    });
    return result;
  }

  /**
   * Post an Adaptive Card to a Teams channel and wait for a response
   * Easily automate the process of sending a message to a Teams channel that contains actions to continue a waiting flow.
   */
  public static async SubscribeChannelFlowContinuation(ChannelFlowContinuationSubscriptionRequest: Record<string, unknown>, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { ChannelFlowContinuationSubscriptionRequest: Record<string, unknown>, groupId: string } = { ChannelFlowContinuationSubscriptionRequest, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ ChannelFlowContinuationSubscriptionRequest: Record<string, unknown>, groupId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'SubscribeChannelFlowContinuation',
        parameters
      },
    });
    return result;
  }

  /**
   * Unsubscribe from a choice of options
   * Unsubscribes from a message with options
   */
  public static async UnsubscribeMessageWithOptions(subscriptionId: string, recipientType: string): Promise<IOperationResult<void>> {
    const parameters: { subscriptionId: string, recipientType: string } = { subscriptionId, recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ subscriptionId: string, recipientType: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'UnsubscribeMessageWithOptions',
        parameters
      },
    });
    return result;
  }

  /**
   * Unsubscribe from a flow continuation
   * Unsubscribes from a flow continuation
   */
  public static async UnsubscribeFlowContinuation(subscriptionId: string, recipientType: string): Promise<IOperationResult<void>> {
    const parameters: { subscriptionId: string, recipientType: string } = { subscriptionId, recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ subscriptionId: string, recipientType: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'UnsubscribeFlowContinuation',
        parameters
      },
    });
    return result;
  }

  /**
   * Get message with options input metadata
   * Get the schema information for the message with options inputs
   */
  public static async GetMessageWithOptionsInputMetadata(recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { recipientType: string } = { recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessageWithOptionsInputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get flow continuation input metadata
   * Get the schema information for the flow continuation inputs
   */
  public static async GetFlowContinuationInputMetadata(recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { recipientType: string } = { recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetFlowContinuationInputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get message with options subscription input metadata
   * Get the schema information for the message with options subscription inputs
   */
  public static async GetMessageWithOptionsSubscriptionInputMetadata(recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { recipientType: string } = { recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessageWithOptionsSubscriptionInputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get flow continuation subscription input metadata
   * Get the schema information for the flow continuation subscription inputs
   */
  public static async GetFlowContinuationSubscriptionInputMetadata(recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { recipientType: string } = { recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetFlowContinuationSubscriptionInputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get message with options subscription output metadata
   * Get the schema information for the message with options subscription outputs
   */
  public static async GetMessageWithOptionsSubscriptionOutputMetadata(recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { recipientType: string } = { recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessageWithOptionsSubscriptionOutputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get flow continuation subscription output metadata
   * Get the schema information for the flow continuation subscription outputs
   */
  public static async GetFlowContinuationSubscriptionOutputMetadata(body: string, recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { body: string, recipientType: string } = { body, recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: string, recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetFlowContinuationSubscriptionOutputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get flow continuation subscription output metadata
   * Get the schema information for the flow continuation subscription outputs
   */
  public static async GetFlowContinuationSubscriptionWithPosterOutputMetadata(body: string, poster: string, recipientType: string): Promise<IOperationResult<ConnectorMetadata>> {
    const parameters: { body: string, poster: string, recipientType: string } = { body, poster, recipientType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: string, poster: string, recipientType: string }, ConnectorMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetFlowContinuationSubscriptionWithPosterOutputMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get selected message hybrid trigger output metadata
   * Get the schema information for the selected message hybrid trigger outputs
   */
  public static async GetSelectedMessageTriggerOutputsMetadata(body: string): Promise<IOperationResult<SelectedMessageTriggerMetadata>> {
    const parameters: { body: string } = { body };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: string }, SelectedMessageTriggerMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetSelectedMessageTriggerOutputsMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get compose message hybrid trigger output metadata
   * Get the schema information for the compose message hybrid trigger outputs
   */
  public static async GetComposeMessageTriggerOutputsMetadata(body: string): Promise<IOperationResult<ComposeMessageTriggerMetadata>> {
    const parameters: { body: string } = { body };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: string }, ComposeMessageTriggerMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetComposeMessageTriggerOutputsMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get compose message hybrid trigger output metadata
   * Get the schema information for the compose message hybrid trigger outputs
   */
  public static async GetCardResponseTriggerOutputsMetadata(body: string): Promise<IOperationResult<CardResponseTriggerMetadata>> {
    const parameters: { body: string } = { body };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: string }, CardResponseTriggerMetadata>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetCardResponseTriggerOutputsMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get a team
   * Gets a Microsoft Team's details
   */
  public static async GetTeam(teamId: string): Promise<IOperationResult<GetTeamResponse>> {
    const parameters: { teamId: string } = { teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string }, GetTeamResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetTeam',
        parameters
      },
    });
    return result;
  }

  /**
   * Get an @mention token for a user
   * Creates a token that can be inserted into a message or adaptive card to @mention a user.
   */
  public static async AtMentionUser(userId: string): Promise<IOperationResult<AtMentionUser_V1>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, AtMentionUser_V1>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'AtMentionUser',
        parameters
      },
    });
    return result;
  }

  /**
   * Get an @mention token for a bot
   * Creates a token that can be inserted into a message to @mention a bot.
   */
  public static async AtMentionBot(botMention: BotMentionRequest): Promise<IOperationResult<AtMentionBotResponse>> {
    const parameters: { botMention: BotMentionRequest } = { botMention };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ botMention: BotMentionRequest }, AtMentionBotResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'AtMentionBot',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all Time Off reasons
   * This operation returns the list of time off reasons associated with a team.
   */
  public static async ListTimeOffReasons(teamId: string, $top?: number): Promise<IOperationResult<GetTimeOffReasonsResponse>> {
    const parameters: { teamId: string, $top?: number } = { teamId, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, $top?: number }, GetTimeOffReasonsResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListTimeOffReasons',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all shifts
   * This operation returns all shifts assigned to members of a team
   */
  public static async ListShifts(teamId: string, startTime?: string, endTime?: string, $top?: number): Promise<IOperationResult<{ value: ShiftResponse[] }>> {
    const parameters: { teamId: string, startTime?: string, endTime?: string, $top?: number } = { teamId, startTime, endTime, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, startTime?: string, endTime?: string, $top?: number }, { value: ShiftResponse[] }>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListShifts',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Get a shift
   * This operation returns details for a shift using the shift's unique ID.
   */
  public static async GetShift(shiftId: string, teamId: string): Promise<IOperationResult<ShiftResponse>> {
    const parameters: { shiftId: string, teamId: string } = { shiftId, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ shiftId: string, teamId: string }, ShiftResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetShift',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Delete a shift
   * This operation deletes a shift using the shift's unique ID.
   */
  public static async DeleteShift(shiftId: string, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { shiftId: string, teamId: string } = { shiftId, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ shiftId: string, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'DeleteShift',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all Open Shifts
   * This operation returns all open shifts in a team
   */
  public static async ListOpenShifts(teamId: string, startTime?: string, endTime?: string, $top?: number): Promise<IOperationResult<{ value: OpenShiftResponse[] }>> {
    const parameters: { teamId: string, startTime?: string, endTime?: string, $top?: number } = { teamId, startTime, endTime, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, startTime?: string, endTime?: string, $top?: number }, { value: OpenShiftResponse[] }>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListOpenShifts',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Create a new Open Shift
   * Create a new open shift in a schedule
   */
  public static async CreateOpenShift(request: EditOpenShiftRequest, teamId: string): Promise<IOperationResult<OpenShiftResponse>> {
    const parameters: { request: EditOpenShiftRequest, teamId: string } = { request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ request: EditOpenShiftRequest, teamId: string }, OpenShiftResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'CreateOpenShift',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Get an open shift
   * This operation returns details for an open shift.
   */
  public static async GetOpenShift(openShiftId: string, teamId: string): Promise<IOperationResult<OpenShiftResponse>> {
    const parameters: { openShiftId: string, teamId: string } = { openShiftId, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ openShiftId: string, teamId: string }, OpenShiftResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetOpenShift',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Update an Open Shift
   * Update an open shift in a schedule.
   */
  public static async UpdateOpenShift(openShiftId: string, request: EditOpenShiftRequest, teamId: string): Promise<IOperationResult<OpenShiftResponse>> {
    const parameters: { openShiftId: string, request: EditOpenShiftRequest, teamId: string } = { openShiftId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ openShiftId: string, request: EditOpenShiftRequest, teamId: string }, OpenShiftResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'UpdateOpenShift',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Delete an open shift
   * This operation deletes an open shift.
   */
  public static async DeleteOpenShift(openShiftId: string, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { openShiftId: string, teamId: string } = { openShiftId, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ openShiftId: string, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'DeleteOpenShift',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all scheduling groups
   * This operation returns all scheduling groups in a schedule
   */
  public static async ListSchedulingGroups(teamId: string, $top?: number): Promise<IOperationResult<{ value: SchedulingGroupResponse[] }>> {
    const parameters: { teamId: string, $top?: number } = { teamId, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, $top?: number }, { value: SchedulingGroupResponse[] }>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListSchedulingGroups',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Get a scheduling group
   * This operation returns details for a scheduling group using its unique ID.
   */
  public static async GetSchedulingGroup(schedulingGroupId: string, teamId: string): Promise<IOperationResult<SchedulingGroupResponse>> {
    const parameters: { schedulingGroupId: string, teamId: string } = { schedulingGroupId, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ schedulingGroupId: string, teamId: string }, SchedulingGroupResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetSchedulingGroup',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all Time Off requests
   * This operation returns all time off requests in a schedule
   */
  public static async ListTimeOffRequests(teamId: string, $top?: number, state?: string): Promise<IOperationResult<{ value: TimeOffRequestResponse[] }>> {
    const parameters: { teamId: string, $top?: number, state?: string } = { teamId, $top, state };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, $top?: number, state?: string }, { value: TimeOffRequestResponse[] }>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListTimeOffRequests',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Approve a Time Off request
   * This operation allows managers to approve a time off request.
   */
  public static async TimeOffRequestApprove(timeOffRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { timeOffRequestId: string, request: Record<string, unknown>, teamId: string } = { timeOffRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ timeOffRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'TimeOffRequestApprove',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Decline a Time Off request
   * This operation allows managers to decline a time off request.
   */
  public static async TimeOffRequestDecline(timeOffRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { timeOffRequestId: string, request: Record<string, unknown>, teamId: string } = { timeOffRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ timeOffRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'TimeOffRequestDecline',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all Offer Shift requests
   * This operation returns all offer shift requests in a schedule
   */
  public static async ListOfferShiftRequests(teamId: string, $top?: number, state?: string): Promise<IOperationResult<{ value: OfferShiftRequestResponse[] }>> {
    const parameters: { teamId: string, $top?: number, state?: string } = { teamId, $top, state };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, $top?: number, state?: string }, { value: OfferShiftRequestResponse[] }>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListOfferShiftRequests',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Approve an Offer Shift request
   * This operation allows recipients/managers to approve an offer shift request.
   */
  public static async OfferShiftRequestApprove(offerShiftRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { offerShiftRequestId: string, request: Record<string, unknown>, teamId: string } = { offerShiftRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ offerShiftRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OfferShiftRequestApprove',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Decline an Offer Shift request
   * This operation allows users to decline an offer shift request.
   */
  public static async OfferShiftRequestDecline(offerShiftRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { offerShiftRequestId: string, request: Record<string, unknown>, teamId: string } = { offerShiftRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ offerShiftRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OfferShiftRequestDecline',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all Swap Shifts requests
   * This operation returns all swap shifts requests in a schedule
   */
  public static async ListSwapShiftsChangeRequests(teamId: string, $top?: number, state?: string): Promise<IOperationResult<{ value: SwapShiftsChangeRequestResponse[] }>> {
    const parameters: { teamId: string, $top?: number, state?: string } = { teamId, $top, state };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, $top?: number, state?: string }, { value: SwapShiftsChangeRequestResponse[] }>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListSwapShiftsChangeRequests',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Approve a Swap Shifts request
   * This operation allows a user to approve a Swap Shifts request.
   */
  public static async SwapShiftsChangeRequestApprove(swapShiftsChangeRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { swapShiftsChangeRequestId: string, request: Record<string, unknown>, teamId: string } = { swapShiftsChangeRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ swapShiftsChangeRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'SwapShiftsChangeRequestApprove',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Decline a Swap Shifts request
   * This operation allows users to decline a swap shifts request.
   */
  public static async SwapShiftsChangeRequestDecline(swapShiftsChangeRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { swapShiftsChangeRequestId: string, request: Record<string, unknown>, teamId: string } = { swapShiftsChangeRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ swapShiftsChangeRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'SwapShiftsChangeRequestDecline',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: List all Open Shift requests
   * This operation returns all open shift change requests in a schedule
   */
  public static async ListOpenShiftChangeRequests(teamId: string, $top?: number, state?: string): Promise<IOperationResult<{ value: OpenShiftChangeRequestResponse[] }>> {
    const parameters: { teamId: string, $top?: number, state?: string } = { teamId, $top, state };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string, $top?: number, state?: string }, { value: OpenShiftChangeRequestResponse[] }>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListOpenShiftChangeRequests',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Approve an Open Shift request
   * This operation allows managers to approve an Open Shift request.
   */
  public static async OpenShiftChangeRequestApprove(openShiftChangeRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { openShiftChangeRequestId: string, request: Record<string, unknown>, teamId: string } = { openShiftChangeRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ openShiftChangeRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OpenShiftChangeRequestApprove',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Decline an Open Shift request
   * This operation allows managers to decline an open shift request.
   */
  public static async OpenShiftChangeRequestDecline(openShiftChangeRequestId: string, request: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { openShiftChangeRequestId: string, request: Record<string, unknown>, teamId: string } = { openShiftChangeRequestId, request, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ openShiftChangeRequestId: string, request: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OpenShiftChangeRequestDecline',
        parameters
      },
    });
    return result;
  }

  /**
   * Shifts: Get a schedule's details
   * This operation returns details of a schedule using the schedule's unique ID.
   */
  public static async GetSchedule(teamId: string): Promise<IOperationResult<ScheduleResponse>> {
    const parameters: { teamId: string } = { teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ teamId: string }, ScheduleResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetSchedule',
        parameters
      },
    });
    return result;
  }

  /**
   * For a selected message
   * For internal use with the on selected message hybrid trigger
   */
  public static async ForASelectedMessage(inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number): Promise<IOperationResult<void>> {
    const parameters: { inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number } = { inputsAdaptiveCard, taskModuleWidth, taskModuleHeight };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ForASelectedMessage',
        parameters
      },
    });
    return result;
  }

  /**
   * For a selected message (V2)
   * For internal use with the on selected message hybrid trigger
   */
  public static async ForASelectedMessageV2(inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number): Promise<IOperationResult<void>> {
    const parameters: { inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number } = { inputsAdaptiveCard, taskModuleWidth, taskModuleHeight };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ForASelectedMessageV2',
        parameters
      },
    });
    return result;
  }

  /**
   * From the compose box
   * For internal use with the compose message hybrid trigger
   */
  public static async ComposeAMessage(inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number): Promise<IOperationResult<void>> {
    const parameters: { inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number } = { inputsAdaptiveCard, taskModuleWidth, taskModuleHeight };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ComposeAMessage',
        parameters
      },
    });
    return result;
  }

  /**
   * From the compose box (V2)
   * For internal use with the compose message hybrid trigger
   */
  public static async ComposeAMessageV2(inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number): Promise<IOperationResult<void>> {
    const parameters: { inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number } = { inputsAdaptiveCard, taskModuleWidth, taskModuleHeight };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ inputsAdaptiveCard?: string, taskModuleWidth?: number, taskModuleHeight?: number }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ComposeAMessageV2',
        parameters
      },
    });
    return result;
  }

  /**
   * For adaptive card responses
   * For internal use with the adaptive card response trigger
   */
  public static async TeamsCardTrigger(inputsAdaptiveCard: string, CardTypeId: string): Promise<IOperationResult<void>> {
    const parameters: { inputsAdaptiveCard: string, CardTypeId: string } = { inputsAdaptiveCard, CardTypeId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ inputsAdaptiveCard: string, CardTypeId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'TeamsCardTrigger',
        parameters
      },
    });
    return result;
  }

  /**
   * When a new team member is removed
   * Triggers when a member is removed from the specified team
   */
  public static async OnGroupMembershipRemoval(groupId: string, $select?: string): Promise<IOperationResult<OnGroupMemberChange_Response>> {
    const parameters: { groupId: string, $select?: string } = { groupId, $select };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, $select?: string }, OnGroupMemberChange_Response>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OnGroupMembershipRemoval',
        parameters
      },
    });
    return result;
  }

  /**
   * When a new team member is added
   * Triggers when a member is added to the given team
   */
  public static async OnGroupMembershipAdd(groupId: string, $select?: string): Promise<IOperationResult<OnGroupMemberChange_Response>> {
    const parameters: { groupId: string, $select?: string } = { groupId, $select };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, $select?: string }, OnGroupMemberChange_Response>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'OnGroupMembershipAdd',
        parameters
      },
    });
    return result;
  }

  /**
   * Create a chat
   * Creates a one on one or group chat
   */
  public static async CreateChat(item: NewChat): Promise<IOperationResult<void>> {
    const parameters: { item: NewChat } = { item };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ item: NewChat }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'CreateChat',
        parameters
      },
    });
    return result;
  }

  /**
   * Create a team
   * Creates a new Microsoft Team
   */
  public static async CreateATeam(body: Record<string, unknown>): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown> } = { body };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown> }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'CreateATeam',
        parameters
      },
    });
    return result;
  }

  /**
   * Get Teams async result
   * This operation gets the result of an asynchronous operation within teams
   */
  public static async GetTeamsAsyncResult(): Promise<IOperationResult<CreateATeamResponse>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, CreateATeamResponse>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetTeamsAsyncResult',
      },
    });
    return result;
  }

  /**
   * Add a member to a team
   * Adds a member to a Microsoft Team
   */
  public static async AddMemberToTeam(body: Record<string, unknown>, teamId: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, teamId: string } = { body, teamId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, teamId: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'AddMemberToTeam',
        parameters
      },
    });
    return result;
  }

  /**
   * Post message in a chat or channel
   * Posts a message to a chat or a channel
   */
  public static async PostMessageToConversation(body: DynamicPostMessageRequest, poster: string, location: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicPostMessageRequest, poster: string, location: string } = { body, poster, location };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicPostMessageRequest, poster: string, location: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostMessageToConversation',
        parameters
      },
    });
    return result;
  }

  /**
   * Reply with a message in a channel
   * Replies with a message to a channel's message
   */
  public static async ReplyWithMessageToConversation(body: DynamicReplyMessageRequest, poster: string, location: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicReplyMessageRequest, poster: string, location: string } = { body, poster, location };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicReplyMessageRequest, poster: string, location: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ReplyWithMessageToConversation',
        parameters
      },
    });
    return result;
  }

  /**
   * Post card in a chat or channel
   * Posts a card to a chat or a channel
   */
  public static async PostCardToConversation(body: DynamicPostCardRequest, poster: string, location: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicPostCardRequest, poster: string, location: string } = { body, poster, location };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicPostCardRequest, poster: string, location: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostCardToConversation',
        parameters
      },
    });
    return result;
  }

  /**
   * Post adaptive card and wait for a response
   * Posts an adaptive card to a chat or a channel and waits for a response from any user. This will pause the flow until any user responds.
   */
  public static async PostCardAndWaitForResponse(body: Record<string, unknown>, poster: string, location: string): Promise<IOperationResult<void>> {
    const parameters: { body: Record<string, unknown>, poster: string, location: string } = { body, poster, location };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: Record<string, unknown>, poster: string, location: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'PostCardAndWaitForResponse',
        parameters
      },
    });
    return result;
  }

  /**
   * Reply with an adaptive card in a channel
   * Replies with an adaptive card to a channel's message
   */
  public static async ReplyWithCardToConversation(body: DynamicReplyCardRequest, poster: string, location: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicReplyCardRequest, poster: string, location: string } = { body, poster, location };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicReplyCardRequest, poster: string, location: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ReplyWithCardToConversation',
        parameters
      },
    });
    return result;
  }

  /**
   * Update an adaptive card in a chat or channel
   * Updates an existing adaptive card
   */
  public static async UpdateCardInConversation(body: DynamicUpdateCardRequest, poster: string, location: string): Promise<IOperationResult<void>> {
    const parameters: { body: DynamicUpdateCardRequest, poster: string, location: string } = { body, poster, location };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: DynamicUpdateCardRequest, poster: string, location: string }, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'UpdateCardInConversation',
        parameters
      },
    });
    return result;
  }

  /**
   * Get message details response schema
   * Get the schema information for get message details response
   */
  public static async GetMessageDetailsInputSchema(threadType: string): Promise<IOperationResult<GetMessageDetailsSchema>> {
    const parameters: { threadType: string } = { threadType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ threadType: string }, GetMessageDetailsSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessageDetailsInputSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * Get message details input metadata
   * Get the schema information for message inputs
   */
  public static async GetMessageDetailsResponseSchema(threadType: string): Promise<IOperationResult<GetMessageDetailsSchema>> {
    const parameters: { threadType: string } = { threadType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ threadType: string }, GetMessageDetailsSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessageDetailsResponseSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * List members input schema
   * Get the schema information for list members input based on thread type
   */
  public static async ListMembersInputSchema(threadType: string): Promise<IOperationResult<ListMembersSchema>> {
    const parameters: { threadType: string } = { threadType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ threadType: string }, ListMembersSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'ListMembersInputSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * Input schema for webhook trigger
   * Gets the input schema for webhook trigger
   */
  public static async GetWebhookTriggerRequestSchema(threadType: string): Promise<IOperationResult<WebhookTriggerSchema>> {
    const parameters: { threadType: string } = { threadType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ threadType: string }, WebhookTriggerSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetWebhookTriggerRequestSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * Response schema for webhook trigger
   * Gets the response schema for webhook trigger
   */
  public static async GetWebhookTriggerResponseSchema(triggerType: string, threadType: string): Promise<IOperationResult<WebhookTriggerSchema>> {
    const parameters: { triggerType: string, threadType: string } = { triggerType, threadType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ triggerType: string, threadType: string }, WebhookTriggerSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetWebhookTriggerResponseSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * Conversation location for where to post
   * Returns a list of locations to post a message or reply based on who the user is posting as
   */
  public static async GetMessageLocations(messageType: string, poster: string): Promise<IOperationResult<Record<string, unknown>>> {
    const parameters: { messageType: string, poster: string } = { messageType, poster };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ messageType: string, poster: string }, Record<string, unknown>>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetMessageLocations',
        parameters
      },
    });
    return result;
  }

  /**
   * Get feed notification input metadata
   * Get the schema information for feed notification
   */
  public static async GetFeedNotificationInputSchema(poster: string, notificationType: string): Promise<IOperationResult<PostFeedSchema>> {
    const parameters: { poster: string, notificationType: string } = { poster, notificationType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ poster: string, notificationType: string }, PostFeedSchema>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetFeedNotificationInputSchema',
        parameters
      },
    });
    return result;
  }

  /**
   * Gets all virtual agent chat bots
   * Gets all virtual agent chat bots in current env
   */
  public static async GetVirtualAgentBots(): Promise<IOperationResult<VirtualAgentBots>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, VirtualAgentBots>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'GetVirtualAgentBots',
      },
    });
    return result;
  }

  /**
   * Send a Microsoft Graph HTTP request
   * Construct a Microsoft Graph REST API request to invoke against the Microsoft Team endpoints. These segments are supported: 1st segment: /teams, /me, /users 2nd segment: channels, chats, installedApps, messages, pinnedMessages. Learn more: https://docs.microsoft.com/en-us/graph/use-the-api
   */
  public static async HttpRequest(Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string): Promise<IOperationResult<ObjectWithoutType>> {
    const parameters: { Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string } = { Uri, Method, Body, ContentType, CustomHeader1, CustomHeader2, CustomHeader3, CustomHeader4, CustomHeader5 };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string }, ObjectWithoutType>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'HttpRequest',
        parameters
      },
    });
    return result;
  }

  /**
   * Proxy endpoint to validate subscriptions and forward notifications
   * Proxy endpoint that receives notifications from the GraphAPI and validates subscriptions
   */
  public static async WebhookResponse(): Promise<IOperationResult<void>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'WebhookResponse',
      },
    });
    return result;
  }

  /**
   * Proxy endpoint to validate and handle lifecycle notifications
   * Proxy endpoint that receives lifecycle notifications from the GraphAPI and handles the response
   */
  public static async WebhookLifecycleNotification(): Promise<IOperationResult<void>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, void>({
      connectorOperation: {
        tableName: MicrosoftTeamsService.dataSourceName,
        operationName: 'WebhookLifecycleNotification',
      },
    });
    return result;
  }
}
