/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { dataSourcesInfo } from '../../.power/appschemas/dataSourcesInfo';
import { getPowerSdkInstance } from '@pa-client/power-code-sdk/lib/';
import type { ApprovalCreationInputV0 } from '../Models/StandardapprovalsModel';
import type { ApprovalTypesList } from '../Models/StandardapprovalsModel';
import type { IOperationResult } from '@pa-client/power-code-sdk/lib/';
import type { WebhookTextSuggestionApprovalCreationInput } from '../Models/StandardapprovalsModel';

export class StandardapprovalsService {
  private static readonly dataSourceName = 'approvals';

  public static async GetApprovalTypes(): Promise<IOperationResult<ApprovalTypesList>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, ApprovalTypesList>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'GetApprovalTypes',
      },
    });
    return result;
  }

  public static async GetApprovalTypeMetadataV2(approvalType: string, metadataType: string): Promise<IOperationResult<void>> {
    const parameters: { approvalType: string, metadataType: string } = { approvalType, metadataType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ approvalType: string, metadataType: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'GetApprovalTypeMetadataV2',
        parameters
      },
    });
    return result;
  }

  public static async GetSubscriptionMetadata(metadataType: string): Promise<IOperationResult<void>> {
    const parameters: { metadataType: string } = { metadataType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ metadataType: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'GetSubscriptionMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Start and wait for an approval
   * Starts an automated approval and then waits for it to complete. The approval is cancelable.
   */
  public static async StartAndWaitForAnApproval(WebhookApprovalCreationInput: Record<string, unknown>, approvalType: string): Promise<IOperationResult<void>> {
    const parameters: { WebhookApprovalCreationInput: Record<string, unknown>, approvalType: string } = { WebhookApprovalCreationInput, approvalType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ WebhookApprovalCreationInput: Record<string, unknown>, approvalType: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'StartAndWaitForAnApproval',
        parameters
      },
    });
    return result;
  }

  /**
   * Start and wait for an approval of text
   * Starts an automated text approval process and then waits for it to complete. The approval is cancelable.
   */
  public static async StartAndWaitForATextSuggestionApproval(WebhookTextSuggestionApprovalCreationInput: WebhookTextSuggestionApprovalCreationInput): Promise<IOperationResult<void>> {
    const parameters: { WebhookTextSuggestionApprovalCreationInput: WebhookTextSuggestionApprovalCreationInput } = { WebhookTextSuggestionApprovalCreationInput };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ WebhookTextSuggestionApprovalCreationInput: WebhookTextSuggestionApprovalCreationInput }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'StartAndWaitForATextSuggestionApproval',
        parameters
      },
    });
    return result;
  }

  /**
   * Create an approval
   * Starts an automated approval, but does not wait for the approval to complete. The approval is cancelable.
   */
  public static async CreateAnApproval(ApprovalCreationInput: Record<string, unknown>, approvalType: string): Promise<IOperationResult<void>> {
    const parameters: { ApprovalCreationInput: Record<string, unknown>, approvalType: string } = { ApprovalCreationInput, approvalType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ ApprovalCreationInput: Record<string, unknown>, approvalType: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'CreateAnApproval',
        parameters
      },
    });
    return result;
  }

  /**
   * Wait for an approval
   * Waits for a specified approval to complete.
   */
  public static async WaitForAnApproval(ApprovalSubscriptionInput: Record<string, unknown>, approvalName: string): Promise<IOperationResult<void>> {
    const parameters: { ApprovalSubscriptionInput: Record<string, unknown>, approvalName: string } = { ApprovalSubscriptionInput, approvalName };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ ApprovalSubscriptionInput: Record<string, unknown>, approvalName: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'WaitForAnApproval',
        parameters
      },
    });
    return result;
  }

  public static async UnsubscribeStartAnApproval(approvalType: string, subscriptionid: string): Promise<IOperationResult<void>> {
    const parameters: { approvalType: string, subscriptionid: string } = { approvalType, subscriptionid };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ approvalType: string, subscriptionid: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'UnsubscribeStartAnApproval',
        parameters
      },
    });
    return result;
  }

  public static async UnsubscribeWaitForAnApproval(approvalName: string, subscriptionid: string): Promise<IOperationResult<void>> {
    const parameters: { approvalName: string, subscriptionid: string } = { approvalName, subscriptionid };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ approvalName: string, subscriptionid: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'UnsubscribeWaitForAnApproval',
        parameters
      },
    });
    return result;
  }

  public static async GetApprovalTypeMetadata(approvalType: string, metadataType: string): Promise<IOperationResult<void>> {
    const parameters: { approvalType: string, metadataType: string } = { approvalType, metadataType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ approvalType: string, metadataType: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'GetApprovalTypeMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Start and wait for an approval (Deprecated)
   * Starts an automated approval and then waits for it to complete. The approval is only canceled on timeout. (Deprecated)
   */
  public static async approvalSubscribeV2(ApprovalCreationInput: Record<string, unknown>, approvalType: string): Promise<IOperationResult<void>> {
    const parameters: { ApprovalCreationInput: Record<string, unknown>, approvalType: string } = { ApprovalCreationInput, approvalType };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ ApprovalCreationInput: Record<string, unknown>, approvalType: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'approvalSubscribeV2',
        parameters
      },
    });
    return result;
  }

  public static async approvalUnsubscribeV2(approvalType: string, subscriptionid: string): Promise<IOperationResult<void>> {
    const parameters: { approvalType: string, subscriptionid: string } = { approvalType, subscriptionid };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ approvalType: string, subscriptionid: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'approvalUnsubscribeV2',
        parameters
      },
    });
    return result;
  }

  /**
   * Start and wait for an Approve or Reject - First to respond approval (Deprecated)
   * Starts an automated approval and then waits for it to complete. The approval is only canceled on timeout. (Deprecated)
   */
  public static async approvalSubscribe(ApprovalCreationInput: ApprovalCreationInputV0): Promise<IOperationResult<void>> {
    const parameters: { ApprovalCreationInput: ApprovalCreationInputV0 } = { ApprovalCreationInput };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ ApprovalCreationInput: ApprovalCreationInputV0 }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'approvalSubscribe',
        parameters
      },
    });
    return result;
  }

  public static async approvalUnsubscribe(subscriptionid: string): Promise<IOperationResult<void>> {
    const parameters: { subscriptionid: string } = { subscriptionid };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ subscriptionid: string }, void>({
      connectorOperation: {
        tableName: StandardapprovalsService.dataSourceName,
        operationName: 'approvalUnsubscribe',
        parameters
      },
    });
    return result;
  }
}
